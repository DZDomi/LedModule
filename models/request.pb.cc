// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ledmodule {
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class TextRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TextRequest> {
} _TextRequest_default_instance_;
class PictureRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PictureRequest> {
} _PictureRequest_default_instance_;
class GifRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GifRequest> {
} _GifRequest_default_instance_;
class VideoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoRequest> {
} _VideoRequest_default_instance_;

namespace protobuf_request_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, textrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, picturerequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, gifrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, videorequest_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextRequest, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifRequest, gif_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(Request)},
  { 17, 23, sizeof(TextRequest)},
  { 24, 29, sizeof(PictureRequest)},
  { 29, 35, sizeof(GifRequest)},
  { 36, 41, sizeof(VideoRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PictureRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GifRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TextRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PictureRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GifRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _VideoRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Request_default_instance_.DefaultConstruct();
  _TextRequest_default_instance_.DefaultConstruct();
  _PictureRequest_default_instance_.DefaultConstruct();
  _GifRequest_default_instance_.DefaultConstruct();
  _VideoRequest_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->textrequest_ = const_cast< ::ledmodule::TextRequest*>(
      ::ledmodule::TextRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->picturerequest_ = const_cast< ::ledmodule::PictureRequest*>(
      ::ledmodule::PictureRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->gifrequest_ = const_cast< ::ledmodule::GifRequest*>(
      ::ledmodule::GifRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->videorequest_ = const_cast< ::ledmodule::VideoRequest*>(
      ::ledmodule::VideoRequest::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rrequest.proto\022\tledmodule\"\263\002\n\007Request\022)"
      "\n\006action\030\001 \002(\0162\031.ledmodule.Request.Actio"
      "n\022\016\n\006sender\030\002 \002(\t\022+\n\013textRequest\030\003 \001(\0132\026"
      ".ledmodule.TextRequest\0221\n\016pictureRequest"
      "\030\004 \001(\0132\031.ledmodule.PictureRequest\022)\n\ngif"
      "Request\030\005 \001(\0132\025.ledmodule.GifRequest\022-\n\014"
      "videoRequest\030\006 \001(\0132\027.ledmodule.VideoRequ"
      "est\"3\n\006Action\022\010\n\004TEXT\020\001\022\013\n\007PICTURE\020\002\022\007\n\003"
      "GIF\020\003\022\t\n\005VIDEO\020\004\"\033\n\013TextRequest\022\014\n\004text\030"
      "\001 \002(\t\"\020\n\016PictureRequest\"\031\n\nGifRequest\022\013\n"
      "\003gif\030\001 \002(\014\"\016\n\014VideoRequest"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_request_2eproto

const ::google::protobuf::EnumDescriptor* Request_Action_descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_enum_descriptors[0];
}
bool Request_Action_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Action Request::TEXT;
const Request_Action Request::PICTURE;
const Request_Action Request::GIF;
const Request_Action Request::VIDEO;
const Request_Action Request::Action_MIN;
const Request_Action Request::Action_MAX;
const int Request::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kActionFieldNumber;
const int Request::kSenderFieldNumber;
const int Request::kTextRequestFieldNumber;
const int Request::kPictureRequestFieldNumber;
const int Request::kGifRequestFieldNumber;
const int Request::kVideoRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_request_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledmodule.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.has_textrequest()) {
    textrequest_ = new ::ledmodule::TextRequest(*from.textrequest_);
  } else {
    textrequest_ = NULL;
  }
  if (from.has_picturerequest()) {
    picturerequest_ = new ::ledmodule::PictureRequest(*from.picturerequest_);
  } else {
    picturerequest_ = NULL;
  }
  if (from.has_gifrequest()) {
    gifrequest_ = new ::ledmodule::GifRequest(*from.gifrequest_);
  } else {
    gifrequest_ = NULL;
  }
  if (from.has_videorequest()) {
    videorequest_ = new ::ledmodule::VideoRequest(*from.videorequest_);
  } else {
    videorequest_ = NULL;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:ledmodule.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&textrequest_, 0, reinterpret_cast<char*>(&videorequest_) -
    reinterpret_cast<char*>(&textrequest_) + sizeof(videorequest_));
  action_ = 1;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ledmodule.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete textrequest_;
  }
  if (this != internal_default_instance()) {
    delete picturerequest_;
  }
  if (this != internal_default_instance()) {
    delete gifrequest_;
  }
  if (this != internal_default_instance()) {
    delete videorequest_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_request_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ledmodule.Request)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_sender()) {
      GOOGLE_DCHECK(!sender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_.UnsafeRawStringPointer())->clear();
    }
    if (has_textrequest()) {
      GOOGLE_DCHECK(textrequest_ != NULL);
      textrequest_->::ledmodule::TextRequest::Clear();
    }
    if (has_picturerequest()) {
      GOOGLE_DCHECK(picturerequest_ != NULL);
      picturerequest_->::ledmodule::PictureRequest::Clear();
    }
    if (has_gifrequest()) {
      GOOGLE_DCHECK(gifrequest_ != NULL);
      gifrequest_->::ledmodule::GifRequest::Clear();
    }
    if (has_videorequest()) {
      GOOGLE_DCHECK(videorequest_ != NULL);
      videorequest_->::ledmodule::VideoRequest::Clear();
    }
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledmodule.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ledmodule.Request.Action action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ledmodule::Request_Action_IsValid(value)) {
            set_action(static_cast< ::ledmodule::Request_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ledmodule.Request.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ledmodule.TextRequest textRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ledmodule.PictureRequest pictureRequest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picturerequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ledmodule.GifRequest gifRequest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gifrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ledmodule.VideoRequest videoRequest = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videorequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledmodule.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledmodule.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledmodule.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ledmodule.Request.Action action = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required string sender = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ledmodule.Request.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // optional .ledmodule.TextRequest textRequest = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->textrequest_, output);
  }

  // optional .ledmodule.PictureRequest pictureRequest = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->picturerequest_, output);
  }

  // optional .ledmodule.GifRequest gifRequest = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gifrequest_, output);
  }

  // optional .ledmodule.VideoRequest videoRequest = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->videorequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledmodule.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ledmodule.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ledmodule.Request.Action action = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required string sender = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ledmodule.Request.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // optional .ledmodule.TextRequest textRequest = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->textrequest_, deterministic, target);
  }

  // optional .ledmodule.PictureRequest pictureRequest = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->picturerequest_, deterministic, target);
  }

  // optional .ledmodule.GifRequest gifRequest = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gifrequest_, deterministic, target);
  }

  // optional .ledmodule.VideoRequest videoRequest = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->videorequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledmodule.Request)
  return target;
}

size_t Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ledmodule.Request)
  size_t total_size = 0;

  if (has_sender()) {
    // required string sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  if (has_action()) {
    // required .ledmodule.Request.Action action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledmodule.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());

    // required .ledmodule.Request.Action action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional .ledmodule.TextRequest textRequest = 3;
    if (has_textrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->textrequest_);
    }

    // optional .ledmodule.PictureRequest pictureRequest = 4;
    if (has_picturerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->picturerequest_);
    }

    // optional .ledmodule.GifRequest gifRequest = 5;
    if (has_gifrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gifrequest_);
    }

    // optional .ledmodule.VideoRequest videoRequest = 6;
    if (has_videorequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videorequest_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledmodule.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledmodule.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledmodule.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledmodule.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender();
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_textrequest()->::ledmodule::TextRequest::MergeFrom(from.textrequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_picturerequest()->::ledmodule::PictureRequest::MergeFrom(from.picturerequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gifrequest()->::ledmodule::GifRequest::MergeFrom(from.gifrequest());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_videorequest()->::ledmodule::VideoRequest::MergeFrom(from.videorequest());
    }
    if (cached_has_bits & 0x00000020u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledmodule.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledmodule.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  if (has_textrequest()) {
    if (!this->textrequest_->IsInitialized()) return false;
  }
  if (has_gifrequest()) {
    if (!this->gifrequest_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  sender_.Swap(&other->sender_);
  std::swap(textrequest_, other->textrequest_);
  std::swap(picturerequest_, other->picturerequest_);
  std::swap(gifrequest_, other->gifrequest_);
  std::swap(videorequest_, other->videorequest_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required .ledmodule.Request.Action action = 1;
bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_action() {
  action_ = 1;
  clear_has_action();
}
::ledmodule::Request_Action Request::action() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.action)
  return static_cast< ::ledmodule::Request_Action >(action_);
}
void Request::set_action(::ledmodule::Request_Action value) {
  assert(::ledmodule::Request_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:ledmodule.Request.action)
}

// required string sender = 2;
bool Request::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
const ::std::string& Request::sender() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.sender)
  return sender_.GetNoArena();
}
void Request::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledmodule.Request.sender)
}
#if LANG_CXX11
void Request::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledmodule.Request.sender)
}
#endif
void Request::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledmodule.Request.sender)
}
void Request::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledmodule.Request.sender)
}
::std::string* Request::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:ledmodule.Request.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_sender() {
  // @@protoc_insertion_point(field_release:ledmodule.Request.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:ledmodule.Request.sender)
}

// optional .ledmodule.TextRequest textRequest = 3;
bool Request::has_textrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_textrequest() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_textrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_textrequest() {
  if (textrequest_ != NULL) textrequest_->::ledmodule::TextRequest::Clear();
  clear_has_textrequest();
}
const ::ledmodule::TextRequest& Request::textrequest() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.textRequest)
  return textrequest_ != NULL ? *textrequest_
                         : *::ledmodule::TextRequest::internal_default_instance();
}
::ledmodule::TextRequest* Request::mutable_textrequest() {
  set_has_textrequest();
  if (textrequest_ == NULL) {
    textrequest_ = new ::ledmodule::TextRequest;
  }
  // @@protoc_insertion_point(field_mutable:ledmodule.Request.textRequest)
  return textrequest_;
}
::ledmodule::TextRequest* Request::release_textrequest() {
  // @@protoc_insertion_point(field_release:ledmodule.Request.textRequest)
  clear_has_textrequest();
  ::ledmodule::TextRequest* temp = textrequest_;
  textrequest_ = NULL;
  return temp;
}
void Request::set_allocated_textrequest(::ledmodule::TextRequest* textrequest) {
  delete textrequest_;
  textrequest_ = textrequest;
  if (textrequest) {
    set_has_textrequest();
  } else {
    clear_has_textrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ledmodule.Request.textRequest)
}

// optional .ledmodule.PictureRequest pictureRequest = 4;
bool Request::has_picturerequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_picturerequest() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_picturerequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_picturerequest() {
  if (picturerequest_ != NULL) picturerequest_->::ledmodule::PictureRequest::Clear();
  clear_has_picturerequest();
}
const ::ledmodule::PictureRequest& Request::picturerequest() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.pictureRequest)
  return picturerequest_ != NULL ? *picturerequest_
                         : *::ledmodule::PictureRequest::internal_default_instance();
}
::ledmodule::PictureRequest* Request::mutable_picturerequest() {
  set_has_picturerequest();
  if (picturerequest_ == NULL) {
    picturerequest_ = new ::ledmodule::PictureRequest;
  }
  // @@protoc_insertion_point(field_mutable:ledmodule.Request.pictureRequest)
  return picturerequest_;
}
::ledmodule::PictureRequest* Request::release_picturerequest() {
  // @@protoc_insertion_point(field_release:ledmodule.Request.pictureRequest)
  clear_has_picturerequest();
  ::ledmodule::PictureRequest* temp = picturerequest_;
  picturerequest_ = NULL;
  return temp;
}
void Request::set_allocated_picturerequest(::ledmodule::PictureRequest* picturerequest) {
  delete picturerequest_;
  picturerequest_ = picturerequest;
  if (picturerequest) {
    set_has_picturerequest();
  } else {
    clear_has_picturerequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ledmodule.Request.pictureRequest)
}

// optional .ledmodule.GifRequest gifRequest = 5;
bool Request::has_gifrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_gifrequest() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_gifrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_gifrequest() {
  if (gifrequest_ != NULL) gifrequest_->::ledmodule::GifRequest::Clear();
  clear_has_gifrequest();
}
const ::ledmodule::GifRequest& Request::gifrequest() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.gifRequest)
  return gifrequest_ != NULL ? *gifrequest_
                         : *::ledmodule::GifRequest::internal_default_instance();
}
::ledmodule::GifRequest* Request::mutable_gifrequest() {
  set_has_gifrequest();
  if (gifrequest_ == NULL) {
    gifrequest_ = new ::ledmodule::GifRequest;
  }
  // @@protoc_insertion_point(field_mutable:ledmodule.Request.gifRequest)
  return gifrequest_;
}
::ledmodule::GifRequest* Request::release_gifrequest() {
  // @@protoc_insertion_point(field_release:ledmodule.Request.gifRequest)
  clear_has_gifrequest();
  ::ledmodule::GifRequest* temp = gifrequest_;
  gifrequest_ = NULL;
  return temp;
}
void Request::set_allocated_gifrequest(::ledmodule::GifRequest* gifrequest) {
  delete gifrequest_;
  gifrequest_ = gifrequest;
  if (gifrequest) {
    set_has_gifrequest();
  } else {
    clear_has_gifrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ledmodule.Request.gifRequest)
}

// optional .ledmodule.VideoRequest videoRequest = 6;
bool Request::has_videorequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_videorequest() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_videorequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_videorequest() {
  if (videorequest_ != NULL) videorequest_->::ledmodule::VideoRequest::Clear();
  clear_has_videorequest();
}
const ::ledmodule::VideoRequest& Request::videorequest() const {
  // @@protoc_insertion_point(field_get:ledmodule.Request.videoRequest)
  return videorequest_ != NULL ? *videorequest_
                         : *::ledmodule::VideoRequest::internal_default_instance();
}
::ledmodule::VideoRequest* Request::mutable_videorequest() {
  set_has_videorequest();
  if (videorequest_ == NULL) {
    videorequest_ = new ::ledmodule::VideoRequest;
  }
  // @@protoc_insertion_point(field_mutable:ledmodule.Request.videoRequest)
  return videorequest_;
}
::ledmodule::VideoRequest* Request::release_videorequest() {
  // @@protoc_insertion_point(field_release:ledmodule.Request.videoRequest)
  clear_has_videorequest();
  ::ledmodule::VideoRequest* temp = videorequest_;
  videorequest_ = NULL;
  return temp;
}
void Request::set_allocated_videorequest(::ledmodule::VideoRequest* videorequest) {
  delete videorequest_;
  videorequest_ = videorequest;
  if (videorequest) {
    set_has_videorequest();
  } else {
    clear_has_videorequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ledmodule.Request.videoRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextRequest::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextRequest::TextRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_request_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledmodule.TextRequest)
}
TextRequest::TextRequest(const TextRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:ledmodule.TextRequest)
}

void TextRequest::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TextRequest::~TextRequest() {
  // @@protoc_insertion_point(destructor:ledmodule.TextRequest)
  SharedDtor();
}

void TextRequest::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextRequest::descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextRequest& TextRequest::default_instance() {
  protobuf_request_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextRequest* TextRequest::New(::google::protobuf::Arena* arena) const {
  TextRequest* n = new TextRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledmodule.TextRequest)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledmodule.TextRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ledmodule.TextRequest.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledmodule.TextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledmodule.TextRequest)
  return false;
#undef DO_
}

void TextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledmodule.TextRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ledmodule.TextRequest.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledmodule.TextRequest)
}

::google::protobuf::uint8* TextRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ledmodule.TextRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ledmodule.TextRequest.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledmodule.TextRequest)
  return target;
}

size_t TextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledmodule.TextRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledmodule.TextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledmodule.TextRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledmodule.TextRequest)
    MergeFrom(*source);
  }
}

void TextRequest::MergeFrom(const TextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledmodule.TextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void TextRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledmodule.TextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextRequest::CopyFrom(const TextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledmodule.TextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TextRequest::Swap(TextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextRequest::InternalSwap(TextRequest* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextRequest::GetMetadata() const {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextRequest

// required string text = 1;
bool TextRequest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextRequest::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void TextRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& TextRequest::text() const {
  // @@protoc_insertion_point(field_get:ledmodule.TextRequest.text)
  return text_.GetNoArena();
}
void TextRequest::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledmodule.TextRequest.text)
}
#if LANG_CXX11
void TextRequest::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledmodule.TextRequest.text)
}
#endif
void TextRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledmodule.TextRequest.text)
}
void TextRequest::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledmodule.TextRequest.text)
}
::std::string* TextRequest::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ledmodule.TextRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextRequest::release_text() {
  // @@protoc_insertion_point(field_release:ledmodule.TextRequest.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ledmodule.TextRequest.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PictureRequest::PictureRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_request_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledmodule.PictureRequest)
}
PictureRequest::PictureRequest(const PictureRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledmodule.PictureRequest)
}

void PictureRequest::SharedCtor() {
  _cached_size_ = 0;
}

PictureRequest::~PictureRequest() {
  // @@protoc_insertion_point(destructor:ledmodule.PictureRequest)
  SharedDtor();
}

void PictureRequest::SharedDtor() {
}

void PictureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureRequest::descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PictureRequest& PictureRequest::default_instance() {
  protobuf_request_2eproto::InitDefaults();
  return *internal_default_instance();
}

PictureRequest* PictureRequest::New(::google::protobuf::Arena* arena) const {
  PictureRequest* n = new PictureRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PictureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledmodule.PictureRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PictureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledmodule.PictureRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ledmodule.PictureRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledmodule.PictureRequest)
  return false;
#undef DO_
}

void PictureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledmodule.PictureRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledmodule.PictureRequest)
}

::google::protobuf::uint8* PictureRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ledmodule.PictureRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledmodule.PictureRequest)
  return target;
}

size_t PictureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledmodule.PictureRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledmodule.PictureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PictureRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledmodule.PictureRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledmodule.PictureRequest)
    MergeFrom(*source);
  }
}

void PictureRequest::MergeFrom(const PictureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledmodule.PictureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PictureRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledmodule.PictureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureRequest::CopyFrom(const PictureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledmodule.PictureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureRequest::IsInitialized() const {
  return true;
}

void PictureRequest::Swap(PictureRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PictureRequest::InternalSwap(PictureRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PictureRequest::GetMetadata() const {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PictureRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GifRequest::kGifFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GifRequest::GifRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_request_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledmodule.GifRequest)
}
GifRequest::GifRequest(const GifRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gif_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gif()) {
    gif_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gif_);
  }
  // @@protoc_insertion_point(copy_constructor:ledmodule.GifRequest)
}

void GifRequest::SharedCtor() {
  _cached_size_ = 0;
  gif_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GifRequest::~GifRequest() {
  // @@protoc_insertion_point(destructor:ledmodule.GifRequest)
  SharedDtor();
}

void GifRequest::SharedDtor() {
  gif_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GifRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GifRequest::descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GifRequest& GifRequest::default_instance() {
  protobuf_request_2eproto::InitDefaults();
  return *internal_default_instance();
}

GifRequest* GifRequest::New(::google::protobuf::Arena* arena) const {
  GifRequest* n = new GifRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GifRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledmodule.GifRequest)
  if (has_gif()) {
    GOOGLE_DCHECK(!gif_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gif_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GifRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledmodule.GifRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes gif = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gif()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledmodule.GifRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledmodule.GifRequest)
  return false;
#undef DO_
}

void GifRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledmodule.GifRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes gif = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gif(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledmodule.GifRequest)
}

::google::protobuf::uint8* GifRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ledmodule.GifRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes gif = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gif(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledmodule.GifRequest)
  return target;
}

size_t GifRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledmodule.GifRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes gif = 1;
  if (has_gif()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gif());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GifRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledmodule.GifRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GifRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GifRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledmodule.GifRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledmodule.GifRequest)
    MergeFrom(*source);
  }
}

void GifRequest::MergeFrom(const GifRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledmodule.GifRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gif()) {
    set_has_gif();
    gif_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gif_);
  }
}

void GifRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledmodule.GifRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GifRequest::CopyFrom(const GifRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledmodule.GifRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GifRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GifRequest::Swap(GifRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GifRequest::InternalSwap(GifRequest* other) {
  gif_.Swap(&other->gif_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GifRequest::GetMetadata() const {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GifRequest

// required bytes gif = 1;
bool GifRequest::has_gif() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GifRequest::set_has_gif() {
  _has_bits_[0] |= 0x00000001u;
}
void GifRequest::clear_has_gif() {
  _has_bits_[0] &= ~0x00000001u;
}
void GifRequest::clear_gif() {
  gif_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gif();
}
const ::std::string& GifRequest::gif() const {
  // @@protoc_insertion_point(field_get:ledmodule.GifRequest.gif)
  return gif_.GetNoArena();
}
void GifRequest::set_gif(const ::std::string& value) {
  set_has_gif();
  gif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledmodule.GifRequest.gif)
}
#if LANG_CXX11
void GifRequest::set_gif(::std::string&& value) {
  set_has_gif();
  gif_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledmodule.GifRequest.gif)
}
#endif
void GifRequest::set_gif(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gif();
  gif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledmodule.GifRequest.gif)
}
void GifRequest::set_gif(const void* value, size_t size) {
  set_has_gif();
  gif_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledmodule.GifRequest.gif)
}
::std::string* GifRequest::mutable_gif() {
  set_has_gif();
  // @@protoc_insertion_point(field_mutable:ledmodule.GifRequest.gif)
  return gif_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GifRequest::release_gif() {
  // @@protoc_insertion_point(field_release:ledmodule.GifRequest.gif)
  clear_has_gif();
  return gif_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GifRequest::set_allocated_gif(::std::string* gif) {
  if (gif != NULL) {
    set_has_gif();
  } else {
    clear_has_gif();
  }
  gif_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gif);
  // @@protoc_insertion_point(field_set_allocated:ledmodule.GifRequest.gif)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRequest::VideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_request_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledmodule.VideoRequest)
}
VideoRequest::VideoRequest(const VideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledmodule.VideoRequest)
}

void VideoRequest::SharedCtor() {
  _cached_size_ = 0;
}

VideoRequest::~VideoRequest() {
  // @@protoc_insertion_point(destructor:ledmodule.VideoRequest)
  SharedDtor();
}

void VideoRequest::SharedDtor() {
}

void VideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoRequest::descriptor() {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoRequest& VideoRequest::default_instance() {
  protobuf_request_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoRequest* VideoRequest::New(::google::protobuf::Arena* arena) const {
  VideoRequest* n = new VideoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledmodule.VideoRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledmodule.VideoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ledmodule.VideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledmodule.VideoRequest)
  return false;
#undef DO_
}

void VideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledmodule.VideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledmodule.VideoRequest)
}

::google::protobuf::uint8* VideoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ledmodule.VideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledmodule.VideoRequest)
  return target;
}

size_t VideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledmodule.VideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledmodule.VideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledmodule.VideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledmodule.VideoRequest)
    MergeFrom(*source);
  }
}

void VideoRequest::MergeFrom(const VideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledmodule.VideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledmodule.VideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRequest::CopyFrom(const VideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledmodule.VideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest::IsInitialized() const {
  return true;
}

void VideoRequest::Swap(VideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRequest::InternalSwap(VideoRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoRequest::GetMetadata() const {
  protobuf_request_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_request_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ledmodule

// @@protoc_insertion_point(global_scope)
